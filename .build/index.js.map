{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["\ninterface IRoleGroupManager {\n  permissionsGroups: IRoleGroup[];\n  addRoleGroup: (permissionsGroup: IRoleGroup) => void;\n  removeRoleGroup: (permissionsGroup: IRoleGroup) => void;\n}\n\ninterface IUsersManager {\n  users: IUser[];\n  addUser: (user: IUser) => void;\n  removeUser: (user: IUser) => void;\n}\n\ninterface IRoleManager {\n  roles: IRole[];\n  addRole: (permissionScheme: IRole) => void;\n  removeRole: (permissionScheme: IRole) => void;\n}\n\ninterface IPermissionsManager {\n  permissions: string[];\n  addPermission: (permission: string) => void;\n  removePermission: (permission: string) => void;\n}\n\ninterface IRoleGroup extends IUsersManager, IRoleManager {\n  uuid: string;\n  name: string;\n}\n\ninterface IUser {\n  uuid: string;\n  name: string;\n}\n\ninterface IList extends IRoleGroupManager {\n  uuid: string;\n  name: string;\n  hasPermission: (user: IUser, permission: string) => boolean;\n}\n\ninterface IBoard extends IRoleGroupManager {\n  uuid: string;\n  name: string;\n  hasPermission: (user: IUser, permission: string) => boolean;\n}\n\ninterface IRole extends IPermissionsManager {\n  uuid: string;\n  name: string;\n}\n\nconst uuidv4 = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n  const r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n  return v.toString(16);\n});\n\n\nconst addRoleGroup = (permissionsGroups: IRoleGroup[]) => (permissionsGroup: IRoleGroup) => {\n  permissionsGroups.push(permissionsGroup);\n};\n\nconst removeRoleGroup = (permissionsGroups: IRoleGroup[]) => (permissionsGroup: IRoleGroup) => {\n  permissionsGroups = permissionsGroups.filter(pg => pg.uuid !== permissionsGroup.uuid);\n  const l = permissionsGroups.length;\n  let i = 0;\n  for(; i < l; i++) {\n    if(permissionsGroups[i].uuid === permissionsGroup.uuid) {\n      permissionsGroups.splice(i, 1);\n      break;\n    }\n  }\n};\n\nconst addUser = (users: IUser[]) => (user: IUser) => {\n  users.push(user);\n};\n\nconst removeUser = (users: IUser[]) => (user: IUser) => {\n  const l = users.length;\n  let i = 0;\n  for(; i < l; i++) {\n    if(users[i].uuid === user.uuid) {\n      users.splice(i, 1);\n      break;\n    }\n  }\n};\n\nconst addRole = (roles: IRole[]) => (permissionScheme: IRole) => {\n  roles.push(permissionScheme);\n};\n\nconst removeRole = (roles: IRole[]) => (permissionScheme: IRole) => {\n  const l = roles.length;\n  let i = 0;\n  for(; i < l; i++) {\n    if(roles[i].uuid === permissionScheme.uuid) {\n      roles.splice(i, 1);\n      break;\n    }\n  }\n};\n\nconst hasPermission = (permissionsGroups: IRoleGroup[]) => (user: IUser, action: string): boolean => {\n  for (let permissionGroup of permissionsGroups) {\n    for (let permissionGroupUser of permissionGroup.users) {\n      if (permissionGroupUser.uuid === user.uuid) {\n        for (let permissionScheme of permissionGroup.roles) {\n          if (permissionScheme.permissions.find((a: string) => a === action)) return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconst makeBoard = (name: string): IBoard => {\n  const permissionsGroups: IRoleGroup[] = [];\n\n  return ({\n    uuid: uuidv4(),\n    name,\n    permissionsGroups,\n    addRoleGroup: addRoleGroup(permissionsGroups),\n    removeRoleGroup: removeRoleGroup(permissionsGroups),\n    hasPermission: hasPermission(permissionsGroups)\n  });\n};\n\nconst makeList = (name: string): IList => {\n  const permissionsGroups: IRoleGroup[] = [];\n\n  return ({\n    uuid: uuidv4(),\n    name,\n    permissionsGroups,\n    addRoleGroup: addRoleGroup(permissionsGroups),\n    removeRoleGroup: removeRoleGroup(permissionsGroups),\n    hasPermission: hasPermission(permissionsGroups)\n  });\n};\n\nconst makeRoleGroup = (name: string) => {\n  const roles: IRole[] = [];\n  const users: IUser[] = [];\n\n  return ({\n    uuid: uuidv4(),\n    name,\n    users,\n    roles,\n    addRole: addRole(roles),\n    removeRole: removeRole(roles),\n    addUser: addUser(users),\n    removeUser: removeUser(users),\n  });\n};\n\nconst makeUser = (name: string) => ({\n  uuid: uuidv4(),\n  name\n});\n\nconst makeRole = (name: string): IRole => {\n  const permissions: string[] = [];\n  return ({\n    uuid: uuidv4(),\n    name,\n    permissions,\n    addPermission: (permission: string) => {\n      permissions.push(permission)\n    },\n    removePermission: (permission: string) => {\n      const l = permissions.length;\n      let i = 0;\n      for(; i < l; i++) {\n        if(permissions[i] === permission) {\n          permissions.splice(i, 1);\n          break;\n        }\n      }\n    }\n  });\n};\n\nconst boardOne = makeBoard('boardOne');\nconst listOne = makeList('listOne');\nconst adminRoleGroup = makeRoleGroup('admin');\nconst listEditorRoleGroup = makeRoleGroup('list-editor');\nconst cardEditorRoleGroup = makeRoleGroup('card-editor');\nconst cardMoverRoleGroup = makeRoleGroup('card-mover');\nconst userA = makeUser('Jason: Admin');\nconst userB = makeUser('Janet: List Editor');\nconst userC = makeUser('June: Card Editor');\nconst userD = makeUser('Jebediah: Card Mover');\n\nconst allBoardRole = makeRole('allBoardPermissions');\nallBoardRole.addPermission('createLists');\nallBoardRole.addPermission('archiveLists');\nallBoardRole.addPermission('moveLists');\n\nconst allListRole = makeRole('allListPermissions');\nallListRole.addPermission('archiveList');\nallListRole.addPermission('moveList');\n\nconst allCardRole = makeRole('allCardPermissions');\nallCardRole.addPermission('createCard');\nallCardRole.addPermission('editCard');\nallCardRole.addPermission('moveCardTo');\nallCardRole.addPermission('moveCardFrom');\nallCardRole.addPermission('archiveCard');\n\nconst moveCardRole = makeRole('moveCardPermissions');\nmoveCardRole.addPermission('moveCardTo');\nmoveCardRole.addPermission('moveCardFrom');\n\nadminRoleGroup.addUser(userA);\nadminRoleGroup.addRole(allBoardRole);\nadminRoleGroup.addRole(allListRole);\nadminRoleGroup.addRole(allCardRole);\n\nboardOne.addRoleGroup(adminRoleGroup);\nlistOne.addRoleGroup(adminRoleGroup);\n\nlistEditorRoleGroup.addUser(userB);\nlistEditorRoleGroup.addRole(allListRole);\n\nlistOne.addRoleGroup(listEditorRoleGroup);\n\ncardEditorRoleGroup.addUser(userC);\ncardEditorRoleGroup.addRole(allCardRole);\n\nlistOne.addRoleGroup(cardEditorRoleGroup);\n\ncardMoverRoleGroup.addUser(userD);\ncardMoverRoleGroup.addRole(moveCardRole);\n\nlistOne.addRoleGroup(cardMoverRoleGroup);\n\nconsole.log('~~Begin~~');\n\nconsole.log(`${userA.name} should have permission to createLists on boardOne: `, boardOne.hasPermission(userA, 'createLists'));\nconsole.log(`${userB.name} should not have permission to createLists on boardOne: `, boardOne.hasPermission(userB, 'createLists'));\n\nconsole.log(`${userA.name} should have permission to archiveLists on boardOne: `, boardOne.hasPermission(userA, 'archiveLists'));\nconsole.log(`${userB.name} should not have permission to archiveLists on boardOne: `, boardOne.hasPermission(userB, 'archiveLists'));\n\nconsole.log(`${userA.name} should have permission to moveLists on boardOne: `, boardOne.hasPermission(userA, 'moveLists'));\nconsole.log(`${userB.name} should not have permission to moveLists on boardOne: `, boardOne.hasPermission(userB, 'moveLists'));\n\nconsole.log(`${userA.name} should have permission to moveList for listOne: `, listOne.hasPermission(userA, 'moveList'));\nconsole.log(`${userB.name} should have permission to moveList for listOne: `, listOne.hasPermission(userB, 'moveList'));\nconsole.log(`${userC.name} should not have permission to moveList for listOne: `, listOne.hasPermission(userC, 'moveList'));\n\nconsole.log(`${userA.name} should have permission to archiveList for listOne: `, listOne.hasPermission(userA, 'archiveList'));\nconsole.log(`${userB.name} should have permission to archiveList for listOne: `, listOne.hasPermission(userB, 'archiveList'));\nconsole.log(`${userC.name} should not have permission to archiveList for listOne: `, listOne.hasPermission(userC, 'archiveList'));\n\nconsole.log(`${userA.name} should have permission to createCard on listOne: `, listOne.hasPermission(userA, 'createCard'));\nconsole.log(`${userB.name} should not have permission to createCard on listOne: `, listOne.hasPermission(userB, 'createCard'));\nconsole.log(`${userC.name} should have permission to createCard on listOne: `, listOne.hasPermission(userC, 'createCard'));\nconsole.log(`${userD.name} should not have permission to createCard on listOne: `, listOne.hasPermission(userD, 'createCard'));\n\nconsole.log(`${userA.name} should have permission to editCard on listOne: `, listOne.hasPermission(userA, 'editCard'));\nconsole.log(`${userB.name} should not have permission to editCard on listOne: `, listOne.hasPermission(userB, 'editCard'));\nconsole.log(`${userC.name} should have permission to editCard on listOne: `, listOne.hasPermission(userC, 'editCard'));\nconsole.log(`${userD.name} should not have permission to editCard on listOne: `, listOne.hasPermission(userD, 'editCard'));\n\nconsole.log(`${userA.name} should have permission to archiveCard on listOne: `, listOne.hasPermission(userA, 'archiveCard'));\nconsole.log(`${userB.name} should not have permission to archiveCard on listOne: `, listOne.hasPermission(userB, 'archiveCard'));\nconsole.log(`${userC.name} should have permission to archiveCard on listOne: `, listOne.hasPermission(userC, 'archiveCard'));\nconsole.log(`${userD.name} should not have permission to archiveCard on listOne: `, listOne.hasPermission(userD, 'archiveCard'));\n\nconsole.log(`${userA.name} should have permission to moveCardTo on listOne: `, listOne.hasPermission(userA, 'moveCardTo'));\nconsole.log(`${userB.name} should not have permission to moveCardTo on listOne: `, listOne.hasPermission(userB, 'moveCardTo'));\nconsole.log(`${userC.name} should have permission to moveCardTo on listOne: `, listOne.hasPermission(userC, 'moveCardTo'));\nconsole.log(`${userD.name} should have permission to moveCardTo on listOne: `, listOne.hasPermission(userD, 'moveCardTo'));\n\nconsole.log(`${userA.name} should have permission to moveCardFrom on listOne: `, listOne.hasPermission(userA, 'moveCardFrom'));\nconsole.log(`${userB.name} should not have permission to moveCardFrom on listOne: `, listOne.hasPermission(userB, 'moveCardFrom'));\nconsole.log(`${userC.name} should have permission to moveCardFrom on listOne: `, listOne.hasPermission(userC, 'moveCardFrom'));\nconsole.log(`${userD.name} should have permission to moveCardFrom on listOne: `, listOne.hasPermission(userD, 'moveCardFrom'));\n\nconsole.log('~~Fin~~');\n"],
  "mappings": "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",
  "names": []
}
